/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Controlador.ProductoControlador;
import Controlador.CategoriaControlador;
import Modelo.Producto;
import Modelo.Categoria;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author YALESKA
 */
public class VistaProductos extends javax.swing.JPanel {

    private final ProductoControlador productoControlador;
    private Integer idProductoSeleccionado = null;
    private final CategoriaControlador categoriaControlador;
    private Integer idCategoriaSeleccionada = null;

    /**
     * Creates new form VistaProductos
     */
    public VistaProductos() {
        initComponents();
        this.productoControlador = new ProductoControlador();
        this.categoriaControlador = new CategoriaControlador();
        cargarDatosTabla();
        cargarCategorias();
    }

    private void limpiar() {
        textNombreProducto.setText("");
        textDescripcionProducto.setText("");
        textPrecioUnitario.setText("");
        textstock.setText("");
        textimagen.setText("");
        textBuscar.setText("");
        idProductoSeleccionado = null;
        btnEliminar.setEnabled(true);
        btnGuardar.setEnabled(true);
    }

    private void cargarDatosTabla() {
        List<Producto> productos = productoControlador.obtenerTodosProductos();
        if (productos != null) {
            DefaultTableModel model = (DefaultTableModel) tablaProducto.getModel();
            model.setRowCount(0);
            for (Producto pro : productos) {
                Object[] row = {
                    pro.getIdProducto(),
                    pro.getNombreProducto(),
                    pro.getDescripcionProducto(),
                    pro.getIdCategoria(),
                    pro.getPrecioUnitario(),
                    pro.getStock(),
                    pro.getImagen()
                };
                model.addRow(row);
            }
        }
    }

    private void cargarCategorias() {
        try {
// Obtener las categorías desde el controlador
            List<Categoria> categorias
                    = categoriaControlador.obtenerTodasCategorias();
// Limpiar el combo box por si tiene datos
            ComboCategoria.removeAllItems();
// Agregar cada categoría al combo box
            for (Categoria cat : categorias) {
                ComboCategoria.addItem(cat.getNombreCategoria());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar las categorías: " + e.getMessage());
        }
    }

    private void seleccionarCategoriaEnCombo(Integer idCategoria) {
        try {
            // Obtener las categorías desde el controlador
            List<Categoria> categorias = categoriaControlador.obtenerTodasCategorias();

            // Recorrer las categorías y buscar la que coincida con el ID
            for (int i = 0; i < categorias.size(); i++) {
                Categoria categoria = categorias.get(i);
                if (categoria.getIdCategoria() == idCategoria) {
                    ComboCategoria.setSelectedIndex(i);
                    break;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al seleccionar categoría: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlabel1 = new javax.swing.JLabel();
        textNombreProducto = new javax.swing.JTextField();
        jlabel2 = new javax.swing.JLabel();
        textDescripcionProducto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textPrecioUnitario = new javax.swing.JTextField();
        textstock = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textimagen = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        Buscar = new javax.swing.JButton();
        textBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProducto = new javax.swing.JTable();
        ComboCategoria = new javax.swing.JComboBox<>();
        btnLimpiar = new javax.swing.JButton();

        jlabel1.setText("nombre_producto");

        textNombreProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNombreProductoActionPerformed(evt);
            }
        });

        jlabel2.setText("descripcion_producto");

        textDescripcionProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textDescripcionProductoActionPerformed(evt);
            }
        });

        jLabel3.setText("Categoria");

        jLabel4.setText("precio_unitario");

        textPrecioUnitario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPrecioUnitarioActionPerformed(evt);
            }
        });

        textstock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textstockActionPerformed(evt);
            }
        });

        jLabel5.setText(" stock");

        jLabel6.setText("imagen");

        textimagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textimagenActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnbtnGuardar(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnbtnActualizar(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnbtnEliminar(evt);
            }
        });

        Buscar.setText("Buscar");
        Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarActionPerformed(evt);
            }
        });

        textBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBuscarActionPerformed(evt);
            }
        });
        textBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscarProductoKeyTyped(evt);
            }
        });

        tablaProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "idProducto", "Nombre_Producto", "Descripcion_Producto", "Categoria", "Precio_Unitario", "Stock", "imagen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaProducto);

        ComboCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventoComboCategorias(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionbtnbtnlimpiar(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textstock, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jlabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ComboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(86, 86, 86)
                                        .addComponent(textPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textimagen, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComboCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textstock, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textimagen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textNombreProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNombreProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNombreProductoActionPerformed

    private void textDescripcionProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textDescripcionProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textDescripcionProductoActionPerformed

    private void textPrecioUnitarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPrecioUnitarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textPrecioUnitarioActionPerformed

    private void textstockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textstockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textstockActionPerformed

    private void textimagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textimagenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textimagenActionPerformed

    private void accionbtnbtnGuardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnbtnGuardar

        String nombreProducto = textNombreProducto.getText();
        String descripcionProducto = textDescripcionProducto.getText();
        int idCategoria = idCategoriaSeleccionada;
        float precioUnitario = Float.parseFloat(textPrecioUnitario.getText());
        int stock = Integer.parseInt(textPrecioUnitario.getText());
        String imagen = textimagen.getText();

        if (!nombreProducto.isEmpty()
                && !descripcionProducto.isEmpty()
                && precioUnitario >= 0
                && stock >= 0) {
            try {
                productoControlador.crearProducto(
                        nombreProducto,
                        descripcionProducto,
                        idCategoria,
                        precioUnitario,
                        stock,
                        imagen);
                limpiar();
                cargarDatosTabla();
                cargarCategorias();
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Error en los datos: " + e.getMessage(),
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Por favor, llene todos los campos obligatorios correctamente.",
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_accionbtnbtnGuardar

    private void accionbtnbtnActualizar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnbtnActualizar
        String nombreProducto = textNombreProducto.getText();
        String descripcionProducto = textDescripcionProducto.getText();
        int idCategoria = idCategoriaSeleccionada;
        float precioUnitario = Float.parseFloat(textPrecioUnitario.getText());
        int stock = Integer.parseInt(textstock.getText());
        String imagen = textimagen.getText();

        if (idProductoSeleccionado != null
                && !nombreProducto.isEmpty()
                && !descripcionProducto.isEmpty()
                && idCategoria >= 0
                && stock >= 0) {

            try {
                productoControlador.actualizarProducto(
                        idProductoSeleccionado,
                        nombreProducto,
                        descripcionProducto,
                        idCategoria,
                        precioUnitario,
                        stock,
                        imagen
                );
                cargarDatosTabla(); // Vuelve a cargar los datos en la tabla después de actualizar
                limpiar(); // Limpia los campos
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Error en los datos: " + e.getMessage(),
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Por favor, llene todos los campos obligatorios.",
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_accionbtnbtnActualizar

    private void accionbtnbtnEliminar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnbtnEliminar

        int filaSeleccionada = tablaProducto.getSelectedRow();
        if (filaSeleccionada != -1) {
            int idProducto = (int) tablaProducto.getValueAt(filaSeleccionada, 0);
            productoControlador.eliminarProducto(idProducto);
            cargarDatosTabla();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Selecciona una fila para eliminar.",
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_accionbtnbtnEliminar

    private void BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BuscarActionPerformed

    private void textBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textBuscarActionPerformed

    private void eventoComboCategorias(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventoComboCategorias
        // TODO add your handling code here:
        ComboCategoria.addActionListener(e -> {
            // Obtener el índice seleccionado
            int indiceSeleccionado = ComboCategoria.getSelectedIndex();

            if (indiceSeleccionado >= 0) { // Verificar que se haya seleccionado algo
                try {
                    // Obtener la lista de categorías desde el controlador o memoria
                    List<Categoria> categorias = categoriaControlador.obtenerTodasCategorias();

                    // Obtener el objeto de categoría correspondiente al índice seleccionado
                    Categoria categoriaSeleccionada = categorias.get(indiceSeleccionado);

                    // Actualizar la variable global con el ID de la categoría seleccionada
                    idCategoriaSeleccionada = categoriaSeleccionada.getIdCategoria();

                    // Mostrar el ID seleccionado en la consola (puedes quitar esta línea)
                    System.out.println("ID de la categoría seleccionada: " + idCategoriaSeleccionada);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error al seleccionar categoría: " + ex.getMessage());
                }
            }
        });

    }//GEN-LAST:event_eventoComboCategorias

    private void accionbtnbtnlimpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionbtnbtnlimpiar
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_accionbtnbtnlimpiar

    private void tablaProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductoMouseClicked
        // TODO add your handling code here:
        // Verifica si fue un doble clic
        if (evt.getClickCount() == 2) {
            // Obtener la fila seleccionada
            int filaSeleccionada = tablaProducto.getSelectedRow();

            if (filaSeleccionada != -1) {
                // Obtener el modelo de la tabla
                DefaultTableModel model = (DefaultTableModel) tablaProducto.getModel();

                // Extraer los datos de la fila seleccionada
                idProductoSeleccionado = (Integer) model.getValueAt(filaSeleccionada, 0);
                String nombreProducto = (String) model.getValueAt(filaSeleccionada, 1);
                String descripcionProducto = (String) model.getValueAt(filaSeleccionada, 2);
                Integer idCategoria = (Integer) model.getValueAt(filaSeleccionada, 3);
                Float precioUnitario = (Float) model.getValueAt(filaSeleccionada, 4);
                Integer stock = (Integer) model.getValueAt(filaSeleccionada, 5);
                String imagen = (String) model.getValueAt(filaSeleccionada, 6);

                // Asignar los valores a los campos de texto
                textNombreProducto.setText(nombreProducto);
                textDescripcionProducto.setText(descripcionProducto);
                textPrecioUnitario.setText(precioUnitario.toString());
                textstock.setText(stock.toString());
                textimagen.setText(imagen);

                // Seleccionar la categoría correspondiente en el combo
                seleccionarCategoriaEnCombo(idCategoria);
                idCategoriaSeleccionada = idCategoria;

                // Deshabilitar el botón Eliminar y Guardar si es necesario
                btnEliminar.setEnabled(false);
                btnGuardar.setEnabled(false);
            }
        }

    }//GEN-LAST:event_tablaProductoMouseClicked

    private void textBuscarProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscarProductoKeyTyped
        // TODO add your handling code here:
        String textoBusqueda = textBuscar.getText().trim().toLowerCase();
        List<Producto> productos = productoControlador.obtenerTodosProductos();

        DefaultTableModel modelo = (DefaultTableModel) tablaProducto.getModel();
        modelo.setRowCount(0); // Limpia la tabla antes de mostrar los resultados

        if (productos != null) {
            for (Producto pro : productos) {
                // Busca coincidencias en los campos del producto
                if (textoBusqueda.isEmpty()
                        || // Si el campo de búsqueda está vacío, muestra todos
                        pro.getNombreProducto().toLowerCase().contains(textoBusqueda)
                        || pro.getDescripcionProducto().toLowerCase().contains(textoBusqueda)
                        || String.valueOf(pro.getIdCategoria()).contains(textoBusqueda)
                        || String.valueOf(pro.getPrecioUnitario()).contains(textoBusqueda)
                        || String.valueOf(pro.getStock()).contains(textoBusqueda)) {

                    Object[] fila = {
                        pro.getIdProducto(),
                        pro.getNombreProducto(),
                        pro.getDescripcionProducto(),
                        pro.getIdCategoria(),
                        pro.getPrecioUnitario(),
                        pro.getStock(),
                        pro.getImagen()
                    };
                    modelo.addRow(fila); // Agrega la fila a la tabla
                }
            }
        }

    }//GEN-LAST:event_textBuscarProductoKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar;
    private javax.swing.JComboBox<String> ComboCategoria;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlabel1;
    private javax.swing.JLabel jlabel2;
    private javax.swing.JTable tablaProducto;
    private javax.swing.JTextField textBuscar;
    private javax.swing.JTextField textDescripcionProducto;
    private javax.swing.JTextField textNombreProducto;
    private javax.swing.JTextField textPrecioUnitario;
    private javax.swing.JTextField textimagen;
    private javax.swing.JTextField textstock;
    // End of variables declaration//GEN-END:variables
}
